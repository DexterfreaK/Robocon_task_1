// Generated by gencpp from file robo/lidarResponse.msg
// DO NOT EDIT!


#ifndef ROBO_MESSAGE_LIDARRESPONSE_H
#define ROBO_MESSAGE_LIDARRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robo
{
template <class ContainerAllocator>
struct lidarResponse_
{
  typedef lidarResponse_<ContainerAllocator> Type;

  lidarResponse_()
    : lidar_array()  {
      lidar_array.assign(0);
  }
  lidarResponse_(const ContainerAllocator& _alloc)
    : lidar_array()  {
  (void)_alloc;
      lidar_array.assign(0);
  }



   typedef boost::array<int64_t, 720>  _lidar_array_type;
  _lidar_array_type lidar_array;





  typedef boost::shared_ptr< ::robo::lidarResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robo::lidarResponse_<ContainerAllocator> const> ConstPtr;

}; // struct lidarResponse_

typedef ::robo::lidarResponse_<std::allocator<void> > lidarResponse;

typedef boost::shared_ptr< ::robo::lidarResponse > lidarResponsePtr;
typedef boost::shared_ptr< ::robo::lidarResponse const> lidarResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robo::lidarResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robo::lidarResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robo::lidarResponse_<ContainerAllocator1> & lhs, const ::robo::lidarResponse_<ContainerAllocator2> & rhs)
{
  return lhs.lidar_array == rhs.lidar_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robo::lidarResponse_<ContainerAllocator1> & lhs, const ::robo::lidarResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robo::lidarResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robo::lidarResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robo::lidarResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robo::lidarResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robo::lidarResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robo::lidarResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robo::lidarResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45165b919dd9aa7c6369c740dbaf4661";
  }

  static const char* value(const ::robo::lidarResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45165b919dd9aa7cULL;
  static const uint64_t static_value2 = 0x6369c740dbaf4661ULL;
};

template<class ContainerAllocator>
struct DataType< ::robo::lidarResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robo/lidarResponse";
  }

  static const char* value(const ::robo::lidarResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robo::lidarResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[720] lidar_array\n"
;
  }

  static const char* value(const ::robo::lidarResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robo::lidarResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lidar_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidarResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robo::lidarResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robo::lidarResponse_<ContainerAllocator>& v)
  {
    s << indent << "lidar_array[]" << std::endl;
    for (size_t i = 0; i < v.lidar_array.size(); ++i)
    {
      s << indent << "  lidar_array[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.lidar_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBO_MESSAGE_LIDARRESPONSE_H
